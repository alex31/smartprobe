

             _______           _____                   
            |__   __|         |  __ \                  
               | |      ___   | |  | |    ___          
               | |     / _ \  | |  | |   / _ \         
               | |    | (_) | | |__| |  | (_) |        
               |_|     \___/  |_____/    \___/         

A CODER:

° en fonction du paramètre   "uart.mode"  SERIAL_NOT_USED, SHELL,
                                          PPRZ_IN_OUT, NMEA_IN, UBX_IN :
                                          -> logger les infos gps

° en fonction du nom du fichier de log : logguer en TSV ou en binaire

       + log binaire, format ?, header

       + ecrire un decodeur qui transforme un log binaire en log TSV en se basant sur le header

A TESTER :
    
  ° verifier les tailles des piles des threads

  
A AMELIORER :

  ° fix


	* (LOW PRIO) recoder la partie  FCNTL_WRITE de sdLog.c pour factoriser le code
	* (LOW PRIO) utiliser module UART (DMA) au lieu de serial pour les I/O sur la liaison série ?



GRANDES LIGNES : 

	  
   ° écrire des modules

	* choix pour la liaison série :
	  + choix de la vitesse
	  + modes :
	    	  ° SHELL (avec stream ascii togglable par la commande shell 't') : OK
		  ° PPRZ_IN_OUT : OK
		  ° NMEA_IN : OK
		  ° UBX_IN : OK

	  + recup de données gps -> log ascii et binaire
				 -> calcul de vecteur vitesse 3D en reference terrestre
	  
	* syslog periodique de la charge de calcul
	
	* ahrs complet qui donne 3 angles si la donnée cap est disponible 

	* calcul d'un vecteur vent dans le repaire terrestre si l'ahrs est
	  en mode 3 angles et que l'autopilote fournit un vecteur vitesse en 3D
   
	* watchdog IWDG -> test au boot, si il y a eu hardfault -> log
	  
	* code pour les leds :
	  ° utiliser un module WS2812 et integrer le code existant led2812
	  
        * quand on teste le 5V, tester aussi le 3.3V en utilisant la reference interne

	* si le fichier de log fini en .txt : log texte, sinon : log binaire

	* passage en USB2

	* utilisation d'une autre liaison série dédiée au debug pour smartprobe de dev
	    


   ° integration de librairies externes
	* module pprz_link
	* coder du comportement via le fichier de conf sans avoir à reflasher :
	  +  micro python ?
	     OU
	  + langage adhoc en utilisant un parser et un lexer ?
	  
	* quand le projet devra être distribué : mettre toutes les
	  dépendences externes en sous modules git
	



EVOLUTION SMARTPROBE V2 (et au delà)

	* access en USB2 pour accelerer l'acces USB Storage


             _____     __  __    ___          
            |  __ \   |  \/  |  / _ \         
            | |  | |  | \  / | | |_| |        
            | |  | |  | |\/| | |  _  |        
            | |__| |  | |  | | | | | |        
            |_____/   |_|  |_| |_| |_|        
                    _                                                     
                   | |                                                    
             ___   | |_    _ __    ___    __ _   _ __ ___    ___          
            / __|  | __|  | '__|  / _ \  / _` | | '_ ` _ \  / __|         
            \__ \  \ |_   | |    |  __/ | (_| | | | | | | | \__ \         
            |___/   \__|  |_|     \___|  \__,_| |_| |_| |_| |___/         



#define STM32_ADC_ADC1_DMA_STREAM           STM32_DMA_STREAM_ID(2, 4)
#define STM32_TIM1_UP_DMA_STREAM	    STM32_DMA_STREAM_ID(2, 5)
#define STM32_TIM1_UP_DMA_CHANNEL	    6
#define STM32_SDC_SDMMC1_DMA_STREAM         STM32_DMA_STREAM_ID(2, 6)
#define STM32_SPI_SPI1_RX_DMA_STREAM        STM32_DMA_STREAM_ID(2, 0)
#define STM32_SPI_SPI1_TX_DMA_STREAM        STM32_DMA_STREAM_ID(2, 3)
#define STM32_I2C_I2C2_RX_DMA_STREAM        STM32_DMA_STREAM_ID(1, 3)
#define STM32_I2C_I2C2_TX_DMA_STREAM        STM32_DMA_STREAM_ID(1, 7)
#define STM32_I2C_I2C4_RX_DMA_STREAM        STM32_DMA_STREAM_ID(1, 2)
#define STM32_I2C_I2C4_TX_DMA_STREAM        STM32_DMA_STREAM_ID(1, 5)

