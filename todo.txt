

             _______           _____                   
            |__   __|         |  __ \                  
               | |      ___   | |  | |    ___          
               | |     / _ \  | |  | |   / _ \         
               | |    | (_) | | |__| |  | (_) |        
               |_|     \___/  |_____/    \___/         

A CODER:


	* utilisation du buscan pour chainer les smartprobes

	* ahrs complet qui donne 3 angles si la donnée cap est disponible 

	* calcul d'un vecteur vent dans le repaire terrestre si l'ahrs est
	  en mode 3 angles et que
	   1/ l'autopilote fournit un vecteur vitesse en 3D
	   ou
	   2/ un gps est connecté et permet de calculer le vecteur vitesse en 3D

	* implementer une directive include dans confFile
	  * mettre les données de calibration dans cet include en rajoutant
	    un parametre "nom de calibration"

  
A AMELIORER :

  	* couleurs de led, mieux categoriser les erreurs qui empèchent le log:
	  + hardfault : rouge, rapide
	  + user fault : no sd or conf file error : orange et blanc
	  + vert que si tout va bien

  	* aligner le numéro de version du syslog avec celui du sensorsLog
  
	* rationaliser utilisation d'allocateur dynamique  :
	  celui de newlib ou tlsf, eliminuer celui de chibios
	* (LOW PRIO) utiliser module UART (DMA) au lieu de serial pour
	             les I/O sur la liaison série ?

	* amélioration des perfos :
    	  + utiliser c++ fmt au lieu de cstdio dans le cas du log texte

        * watchdog IWDG -> test au boot, si il y a eu hardfault -> log
	

GRANDES LIGNES : 

   ° integration de librairies externes
	* coder du comportement via le fichier de conf sans avoir à reflasher :
	  +  micro python ?
	     OU
	  + langage adhoc en utilisant un parser et un lexer ?
	  

	



             _____     __  __    ___          
            |  __ \   |  \/  |  / _ \         
            | |  | |  | \  / | | |_| |        
            | |  | |  | |\/| | |  _  |        
            | |__| |  | |  | | | | | |        
            |_____/   |_|  |_| |_| |_|        
                    _                                                     
                   | |                                                    
             ___   | |_    _ __    ___    __ _   _ __ ___    ___          
            / __|  | __|  | '__|  / _ \  / _` | | '_ ` _ \  / __|         
            \__ \  \ |_   | |    |  __/ | (_| | | | | | | | \__ \         
            |___/   \__|  |_|     \___|  \__,_| |_| |_| |_| |___/         



#define STM32_ADC_ADC1_DMA_STREAM           STM32_DMA_STREAM_ID(2, 4)
#define STM32_TIM1_UP_DMA_STREAM	    STM32_DMA_STREAM_ID(2, 5)
#define STM32_TIM1_UP_DMA_CHANNEL	    6
#define STM32_SDC_SDMMC1_DMA_STREAM         STM32_DMA_STREAM_ID(2, 6)
#define STM32_SPI_SPI1_RX_DMA_STREAM        STM32_DMA_STREAM_ID(2, 0)
#define STM32_SPI_SPI1_TX_DMA_STREAM        STM32_DMA_STREAM_ID(2, 3)
#define STM32_I2C_I2C2_RX_DMA_STREAM        STM32_DMA_STREAM_ID(1, 3)
#define STM32_I2C_I2C2_TX_DMA_STREAM        STM32_DMA_STREAM_ID(1, 7)
#define STM32_I2C_I2C4_RX_DMA_STREAM        STM32_DMA_STREAM_ID(1, 2)
#define STM32_I2C_I2C4_TX_DMA_STREAM        STM32_DMA_STREAM_ID(1, 5)

