

             _______           _____                   
            |__   __|         |  __ \                  
               | |      ___   | |  | |    ___          
               | |     / _ \  | |  | |   / _ \         
               | |    | (_) | | |__| |  | (_) |        
               |_|     \___/  |_____/    \___/         


   ° module de lecture de conf
     * mettre le nom du fichier de conf dans hardwareConf.hpp
     * remplacer les DebugTrace() par des syslog()
     * test de la presence d'une clef à la compilation plutot qu'à l'execution (voir si la methode d'accès à frozen::map est constexpr)
     * test si des clefs son absentes du fichier de conf : syslog(warning) et utilisation de la valeur par defaut
     * si le fichier smartprobe.conf n'existe pas : en creer un avec toutes les clefs associées aux valeurs par defaut et rebooter la carte
     * passer en paramètres :
       + frequence d'acquisition des capteurs
       + paramètre d'init de l'ICM20600
       
     
     


   ° fix
	* recoder la partie  FCNTL_WRITE de sdLog.c pour factoriser le code
	
	  
   ° écrire des modules
	* lecture/analyse du fichier de conf
	* ahrs
	  ° qui puisse donner 2 angles si la donnée heading n'est pas disponible
	                      3 angles si la donnée heading est disponible :
          ° https://github.com/bitcraze/crazyflie-firmware/blob/master/src/modules/src/sensfusion6.c#L107

	* watchdog IWDG -> test au boot, si il y a eu hardfault -> log
	* recup de données gps -> ref horaire, calcul du cap, choix du format
	  dans le fichier de conf :
	  ø nmea ou trame pprz (ou autre ?)
	* calcul d'un vecteur vent dans le repaire de la sonde une fois
	  la matrice de transformation issue de la calibration fournie
	  dans le fichier de config
	* calcul d'un vecteur vent dans le repaire terrestre si l'ahrs est
	  en mode 3 angles et que l'autopilote fournit un vecteur vitesse en 3D
	* code pour les leds :
	  ° utiliser un module WS2812 : choix du timer, DMA
	  ° blink verte  : heartbeat
	  ° blink bleu :   usb_storage
	  ° uniquement en cas d'erreur grave :
	  °  blink jaune : pb sdcard
	  °  blink rouge : pb capteur
	    



   ° integration de librairies externes
	* eigen ?
	* module SerialMessage
	* micro python pour coder du comportement via le fichier de conf
	  sans avoir à reflasher ?
	* quand le projet devra être distribué : mettre toutes les
	  dépendences externes en sous modules git
	


             _____     __  __    ___          
            |  __ \   |  \/  |  / _ \         
            | |  | |  | \  / | | |_| |        
            | |  | |  | |\/| | |  _  |        
            | |__| |  | |  | | | | | |        
            |_____/   |_|  |_| |_| |_|        
                    _                                                     
                   | |                                                    
             ___   | |_    _ __    ___    __ _   _ __ ___    ___          
            / __|  | __|  | '__|  / _ \  / _` | | '_ ` _ \  / __|         
            \__ \  \ |_   | |    |  __/ | (_| | | | | | | | \__ \         
            |___/   \__|  |_|     \___|  \__,_| |_| |_| |_| |___/         



#define STM32_ADC_ADC1_DMA_STREAM           STM32_DMA_STREAM_ID(2, 4)
#define STM32_SDC_SDMMC1_DMA_STREAM         STM32_DMA_STREAM_ID(2, 6)
#define STM32_SPI_SPI1_RX_DMA_STREAM        STM32_DMA_STREAM_ID(2, 0)
#define STM32_SPI_SPI1_TX_DMA_STREAM        STM32_DMA_STREAM_ID(2, 3)
#define STM32_I2C_I2C2_RX_DMA_STREAM        STM32_DMA_STREAM_ID(1, 3)
#define STM32_I2C_I2C2_TX_DMA_STREAM        STM32_DMA_STREAM_ID(1, 7)
#define STM32_I2C_I2C4_RX_DMA_STREAM        STM32_DMA_STREAM_ID(1, 2)
#define STM32_I2C_I2C4_TX_DMA_STREAM        STM32_DMA_STREAM_ID(1, 5)

